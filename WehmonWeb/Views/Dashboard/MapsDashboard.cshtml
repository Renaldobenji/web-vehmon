@{
    ViewBag.Title = "MapsDashboard";
    Layout = "~/Views/Shared/_PanelLayout.cshtml";
}
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBWXZf8nTtmuFyEkXKKfkECXTlRlYF8EAw"></script>
@if (ViewBag.RouteId == -1)
{
    <h2>Maps Dashboard     
        <button type="button" class="btn" data-toggle="modal" data-target="#truckPartial">
            <span class="glyphicon glyphicon-road" style="margin-right: 10px" aria-hidden="true"></span>Shifts
        </button>
        <button type="button" class="btn" data-toggle="modal" data-target="#VehicleModal">
            <span class="glyphicon glyphicon-map-marker" style="margin-right: 10px" aria-hidden="true"></span>Realtime Updating
        </button>
        <button type="button" class="btn" data-toggle="modal" data-target="#ChatModal">
            <span class="glyphicon glyphicon-comment" style="margin-right: 10px" aria-hidden="true"></span>Chat
        </button></h2>
}
else
{
    <h2>Display Shift</h2>
}
<div class="container-fluid">

    
    <div class="col-lg-12">
        <div id="map-canvas" style="width: 100%; height: 800px"></div>
    </div>
    @if (ViewBag.RouteId == -1)
    {
        {
            Html.RenderAction("RenderTruckDashboard", "Coordinates");
        }
        {
            Html.RenderAction("RenderConversationPartial", "Chat");
        }
        {
            Html.RenderAction("RenderShiftTreeView", "Maps");
        }
    }
</div>
<script>
    var map;
    var lines = [];
    var infowindow;

    var iconPath = "@Url.Content("~/Content/icons/icon-blue-dot.png")";
    var myMarker = function (infoWin, marker) {
        this.infoWindow = infoWin;
        this.marker = marker;
    };

    var line = function (map) {
        this.GMCoords = [];
        this.GMLine = null;
        var that = this;
        this.map = map;
        this.bounds = null;
        this.markers = [];
        this.LoadFromJson = function (data) {
            that.bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < data.length; i++) {
                var point = new google.maps.LatLng(data[i].lat, data[i].lng);
                that.GMCoords.push(point);
                that.bounds.extend(point);
                var markerToAdd = new myMarker(new google.maps.InfoWindow(), new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].lat, data[i].lng),
                    map: that.map,
                    icon: iconPath,
                    text: data[i].date,
                    title: 'Hello World!'
                }));
                
                that.markers.push(markerToAdd);
                google.maps.event.addListener(markerToAdd.marker, 'click', function () {
                    markerToAdd.infoWindow.setContent(this.text);
                    markerToAdd.infoWindow.open(that.map, this);
                });
            }
            that.GMLine = new google.maps.Polyline({
                path: that.GMCoords,
                geodesic: true,
                strokeColor: getRandomColor(),
                strokeOpacity: 1.0,
                strokeWeight: 2
            });
            that.GMLine.setMap(that.map);
            that.map.setCenter(that.bounds.getCenter());
            that.map.fitBounds(that.bounds);
        };
        this.RemovePath = function () {
            for (var i =0; i< that.markers.length;i++) {
                that.markers[i].marker.setMap(null);
            }
            that.GMLine.setMap(null);
        };
    };

    function loadLineJSON(data) {
        if (!(data.routeId + "route" in lines)) {
            lines[data.routeId + "route"] = new line(map);
            lines[data.routeId + "route"].LoadFromJson(data.routes);
        }
    }

    function loadLine(routeId) {
        $.ajax({
            url: "@Url.Action("GetCoordinatesForRoute", "Maps")?routeId=" + routeId,
            type: 'get',
            dataType: 'json',
            success: function (data) {
                loadLineJSON(data);
            }
        });
    }
    
    

    function removeLine(routeId) {
        lines[routeId + "route"].RemovePath();
        delete lines[routeId + "route"];

    }


    var data = "Hello World!";

    var Coordinate = function (lat, lng, maps, data) {
        this.maps = maps;
        this.geCoord = new google.maps.LatLng(lat, lng);
        this.marker = null;
        this.data = data;
        this.lat = lat;
        this.lng = lng;
        var that = this;
        this.infowindow = new google.maps.InfoWindow({
            content: that.data
        });
        this.updateLocation = function (lattitude, longitude) {
            that.geCoord = new google.maps.LatLng(lattitude, longitude);
            that.marker.setPosition(that.geCoord);
        };
        this.draw = function (image) {
            that.marker = new google.maps.Marker({
                position: that.geCoord,
                map: that.maps,
                icon: image,
                text: new Date().toString(),
                title: 'Hello World!'
            });
            google.maps.event.addListener(that.marker, 'click', function () {
                data = that.marker.text;
                infowindow.open(that.maps, that.marker);
            });
        };
        this.SetImage = function (image) {
            that.marker.setIcon(image);
        }
        this.remove = function () {
            that.marker.setMap(null);
        };
    };

    var truck = function (maps) {
        this.maps = maps;
        this.Coords = [];
        this.MaxSize = 0;
        var that = this;
        this.trailImage = "@Url.Content("~/Content/icons/icon-blue-dot.png")";
        this.mainImage = "@Url.Content("~/Content/icons/truck3.png")";
        this.AddCoord = function (lat, lng) {
            var coord = new Coordinate(lat, lng, maps);
            coord.draw(that.mainImage);
            if (that.Coords.length > 0) {
                that.Coords[0].SetImage(that.trailImage);
            }
            that.Coords.unshift(coord);
            if (that.Coords.length > that.MaxSize) {
                that.Coords.pop().remove();
            }
        };
        this.Remove = function () {
            for (var i = 0; i < that.Coords.length; i++) {
                that.Coords[i].remove();
            };
        };
        this.Emulate = function () {
            var lastCoord = that.Coords[0];
            return { Lat: lastCoord.lat + 0.1, Lng: lastCoord.lng += 0.1 };
        };
    };

    var mapsTracker = {

    };

    var myLatlng = new google.maps.LatLng(-30.397, 25.644);
    var marker;
    var trucker;
    function initialize() {
        var mapOptions = {
            center: myLatlng,
            zoom: 8
        };
        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

        @if (ViewBag.RouteId > 0)
    {
        @Html.Raw(String.Format("loadLine({0})",ViewBag.RouteId ))
    }

        function loadClientMethods(bub) {


        }

        ;
    }

    google.maps.event.addDomListener(window, 'load', initialize);
    var lat = -31.397;

    $(document).on("click", "#movemarker", function () {

        trucker.MaxSize = 8;
        trucker.AddCoord(lat, 25.644);
        lat = lat + 0.05;
        //marker.setPosition(new google.maps.LatLng(-31.397, 25.644));

    });
    var lastId = -1;
    var trucks = [];

    $(document).on("click", ".userTruck", function () {
        var userId = $(this).attr("data-userId");

        if (this.checked) {
            lastId = $(this).attr("data-userId");
            $.ajax({
                url: "@Url.Action("GetTruckCoordinates", "Coordinates")?userId=" + userId,
                type: 'get',
                dataType: 'json',
                success: function (data) {
                    lastId = userId;
                    trucks[userId + "Truck"] = new truck(map);
                    trucks[userId + "Truck"].MaxSize = 8;
                    for (var i = 0; i < data.length; i++) {
                        var cord = data[i];
                        trucks[userId + "Truck"].AddCoord(cord.Lat, cord.Lng);
                    }
                }
            });
        } else {
            trucks[userId + "Truck"].Remove();
            delete trucks[userId + "Truck"];
        }
    });
    var userGuid = "";

    function MovePoint() {
        var em = trucks[lastId + "Truck"].Emulate();
        var coordString = em.Lat + "," + em.Lng + ",now";
        $.ajax({
            url: "@Url.Action("Log", "Coordinates")",
            type: 'get',
            dataType: 'json',
            data: { token: userGuid, coordinates: coordString },
            success: function (data) {
            }
        });
    }


    function GetToken(userId) {
        $.ajax({
            url: "@Url.Action("GetUserGuid", "Coordinates")?userId=" + userId,
            type: 'get',
            dataType: 'json',
            success: function (data) {
                userGuid = data.token;
                // alert(data.token);
                timer = window.setInterval(MovePoint, 2000);
            }
        });
    }

    var timer;
    $(document).on("click", "#emulate", function () {
        if (this.checked && lastId > -1) {
            GetToken(lastId);

        } else {
            window.clearInterval(timer);
        }
    });

    function getRandomColor() {
        var letters = '0123456789ABCDEF'.split('');
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
</script>
